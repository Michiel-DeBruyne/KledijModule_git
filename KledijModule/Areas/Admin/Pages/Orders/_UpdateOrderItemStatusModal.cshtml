@using ProjectCore.Domain.Entities.Bestellingen
@model KledijModule.Areas.Admin.Pages.Orders.DetailsModel
@{
    ArgumentNullException.ThrowIfNull(Model);
}
<!-- Modal -->
<div id="my-modal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div id="modal-body" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="myForm" method="post" action="@Url.Page("Details", "Update")">
                    <div class="mb-3">
                        <label asp-for="Data.OrderStatusValue" class="form-label">Update Status</label>
                        <select asp-for="Data.OrderStatusValue" class="form-control" placeholder="Status"
                                asp-items="@Html.GetEnumSelectList<OrderStatus>()"></select>
                    </div>
                    @Html.AntiForgeryToken()
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="saveChangesButton" class="btn btn-primary">
                    Save changes
                </button>
            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        // Log een testbericht om te bevestigen dat het script geladen is
        console.log("test");

        // Handle form submission
        $('#saveChangesButton').on('click', function () {
            var form = $('#myForm');
            var selectedItems = $('input[type="checkbox"]:checked').map(function () {
                return $(this).val();
            }).get();

            // Verwijder bestaande verborgen inputs en voeg nieuwe toe
            form.find('input[name="selectedItems"]').remove();
            selectedItems.forEach(function (item) {
                $('<input>', {
                    type: 'hidden',
                    name: 'Data.OrderItems',
                    value: item
                }).appendTo(form);
            });

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function () {
                    var modal = bootstrap.Modal.getInstance('#my-modal');
                    if (modal) {
                        modal.hide(); // Sluit de modal
                    }
                    // Herlaad de pagina (optioneel)
                     window.location.reload();
                },
                error: function (jqXHR) {
                    // Verkrijg de foutmelding van de server
                    var errorMessage = jqXHR.responseText || 'Er is een fout opgetreden bij het bijwerken.';

                    // Toon de foutmelding in een alert
                    alert(errorMessage);
                }
            });
        });

        // Toon de modal bij het laden van de pagina
        new bootstrap.Modal('#my-modal').show();
    });
</script>
